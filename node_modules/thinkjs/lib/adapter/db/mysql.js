'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;
var MysqlSocket = think.adapter('socket', 'mysql');
/**
 * mysql db
 * @type {Class}
 */

var _default = (function (_think$adapter$db) {
  _inherits(_default, _think$adapter$db);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$db.apply(this, arguments);
  }

  /**
   * get mysql socket instance
   * @param  {Object} config []
   * @return {}        []
   */

  _default.prototype.socket = function socket() {
    if (this._socket) {
      return this._socket;
    }
    this._socket = new MysqlSocket(this.config);
    return this._socket;
  };

  /**
   * get table info
   * @param  {String} table [table name]
   * @return {Promise}       []
   */

  _default.prototype.getFields = function getFields(table) {
    var data, ret;
    return _regeneratorRuntime.async(function getFields$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(this.query('SHOW COLUMNS FROM ' + this.parseKey(table)));

        case 2:
          data = context$2$0.sent;
          ret = {};

          data.forEach(function (item) {
            ret[item.Field] = {
              'name': item.Field,
              'type': item.Type,
              'required': item.Null === '',
              'default': item.Default,
              'primary': item.Key === 'PRI',
              'unique': item.Key === 'UNI',
              'auto_increment': item.Extra.toLowerCase() === 'auto_increment'
            };
          });
          return context$2$0.abrupt('return', ret);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  /**
   * parse key
   * @param  {String} key []
   * @return {String}     []
   */

  _default.prototype.parseKey = function parseKey() {
    var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

    key = key.trim();
    if (think.isEmpty(key)) {
      return '';
    }
    if (think.isNumberString(key)) {
      return key;
    }
    if (!/[,\'\"\*\(\)`.\s]/.test(key)) {
      key = '`' + key + '`';
    }
    return key;
  };

  return _default;
})(think.adapter.db);

exports['default'] = _default;
module.exports = exports['default'];