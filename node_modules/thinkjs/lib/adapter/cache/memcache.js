'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

exports.__esModule = true;
var memcacheSocket = think.adapter('socket', 'memcache');

/**
 * memcache cache
 */

var _default = (function (_think$adapter$cache) {
  _inherits(_default, _think$adapter$cache);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$cache.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    options = think.extend({}, think.config('memcache'), options);
    this.timeout = options.timeout;
    this.keyPrefix = options.prefix;

    var key = think.md5(JSON.stringify(options));
    var instance = thinkCache(thinkCache.MEMCACHE, key);
    if (!instance) {
      instance = new memcacheSocket(options);
      thinkCache(thinkCache.MEMCACHE, key, instance);
    }
    this.memcache = instance;
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    return this.memcache.get(this.keyPrefix + name).then(function (value) {
      if (value) {
        return JSON.parse(value);
      }
    })['catch'](function () {});
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value) {
    var timeout = arguments.length <= 2 || arguments[2] === undefined ? this.timeout : arguments[2];

    if (think.isObject(name)) {
      timeout = value || timeout;
      var key = _Object$keys(name)[0];
      value = name[key];
      name = key;
    }
    return this.memcache.set(this.keyPrefix + name, JSON.stringify(value), timeout)['catch'](function () {});
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    return this.memcache['delete'](this.keyPrefix + name)['catch'](function () {});
  };

  return _default;
})(think.adapter.cache);

exports['default'] = _default;
module.exports = exports['default'];