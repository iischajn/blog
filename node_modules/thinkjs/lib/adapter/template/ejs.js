'use strict';
/**
 * ejs template
 * @type {Class}
 */

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

exports.__esModule = true;

var _default = (function (_think$adapter$template) {
  _inherits(_default, _think$adapter$template);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$template.apply(this, arguments);
  }

  /**
   * run
   * @param  {String} templateFile []
   * @param  {Object} tVar         []
   * @return {Promise}             []
   */

  _default.prototype.run = function run(templateFile, tVar, config) {
    var ejs, conf, prerender, content;
    return _regeneratorRuntime.async(function run$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(think.npm('ejs'));

        case 2:
          ejs = context$2$0.sent;
          conf = think.extend({
            filename: templateFile,
            cache: true
          }, think.config('view.options'), config && config.options);
          prerender = config && config.prerender;

          prerender = prerender || think.config('view.prerender');
          if (think.isFunction(prerender)) {
            prerender(ejs);
          }

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(this.getContent(templateFile));

        case 9:
          content = context$2$0.sent;
          return context$2$0.abrupt('return', ejs.compile(content, conf)(tVar));

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };

  return _default;
})(think.adapter.template);

exports['default'] = _default;
module.exports = exports['default'];

//pre render