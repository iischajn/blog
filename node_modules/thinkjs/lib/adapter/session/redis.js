'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

exports.__esModule = true;
var redisSocket = think.adapter('socket', 'redis');

/**
 * redis session
 */

var _default = (function (_think$adapter$session) {
  _inherits(_default, _think$adapter$session);

  function _default() {
    _classCallCheck(this, _default);

    _think$adapter$session.apply(this, arguments);
  }

  /**
   * init
   * @param  {Object} options []
   * @return {}         []
   */

  _default.prototype.init = function init() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    this.timeout = options.timeout;
    this.cookie = options.cookie;
    this.redis = new redisSocket(options);
  };

  /**
   * get session
   * @return {Promise} []
   */

  _default.prototype.getData = function getData() {
    var _this = this;

    if (this.data) {
      return _Promise.resolve(this.data);
    }
    return this.redis.get(this.cookie).then(function (data) {
      _this.data = {};
      try {
        _this.data = JSON.parse(data) || {};
      } catch (e) {}
      return _this.data;
    });
  };

  /**
   * get data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype.get = function get(name) {
    var _this2 = this;

    return this.getData().then(function () {
      return !name ? _this2.data : _this2.data[name];
    });
  };

  /**
   * set data
   * @param {String} name    []
   * @param {Mixed} value   []
   * @param {Number} timeout []
   */

  _default.prototype.set = function set(name, value, timeout) {
    var _this3 = this;

    if (timeout) {
      this.timeout = timeout;
    }
    return this.getData().then(function () {
      _this3.data[name] = value;
    });
  };

  /**
   * delete data
   * @param  {String} name []
   * @return {Promise}      []
   */

  _default.prototype['delete'] = function _delete(name) {
    var _this4 = this;

    return this.getData().then(function () {
      if (name) {
        delete _this4.data[name];
      } else {
        _this4.data = {};
      }
    });
  };

  /**
   * flush data
   * @return {Promise} []
   */

  _default.prototype.flush = function flush() {
    var _this5 = this;

    return this.getData().then(function () {
      return _this5.redis.set(_this5.cookie, JSON.stringify(_this5.data), _this5.timeout);
    });
  };

  return _default;
})(think.adapter.session);

exports['default'] = _default;
module.exports = exports['default'];