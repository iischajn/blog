'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

/**
 * read html cache
 * @param  {} )
 * @return {}     []
 */

var _default = (function (_think$middleware$base) {
  _inherits(_default, _think$middleware$base);

  function _default() {
    _classCallCheck(this, _default);

    _think$middleware$base.apply(this, arguments);
  }

  /**
   * run
   * @return {} []
   */

  _default.prototype.run = function run() {
    var cache = this.cache = this.config('html_cache');
    if (!cache.on || think.isEmpty(cache.rules)) {
      return;
    }
    var cacheTime = this.getCacheTime();
    if (this.isCacheExpired(cacheTime)) {
      return;
    }
    this.responseCacheContent();
    return think.prevent();
  };

  /**
   * repsonse cache content
   * @return {} []
   */

  _default.prototype.responseCacheContent = function responseCacheContent() {
    var http = this.http;
    var fileStream = _fs2['default'].createReadStream(this.cache.path + '/' + http.html_filename);
    http.header('Content-Type', 'text/html');
    http.cookie(true);
    fileStream.pipe(http.res);
    fileStream.on('end', function () {
      return http.end();
    });
  };

  /**
   * get cache time
   * @return {Number} []
   */

  _default.prototype.getCacheTime = function getCacheTime() {
    /**
     * rules data
     * {
     *     'index/index': ['index_home', 1800, html_cache_callback]
     * }
     * @type {}
     */
    var rules = this.cache.rules;
    var http = this.http;
    var module = http.module;
    var controller = http.controller;
    var action = http.action;
    var list = [module + '/' + controller + '/' + action, controller + '/' + action, '' + action, '*'];
    var html = [];
    for (var i = 0, _length = list.length, item = undefined; i < _length; i++) {
      item = list[i];
      if (item in rules) {
        html = rules[item];
        break;
      }
    }
    if (think.isEmpty(html)) {
      return false;
    }
    if (!think.isArray(html)) {
      html = [html];
    }
    if (think.isFunction(html[1])) {
      html[2] = html[1];
      html[1] = 0;
    }
    var rule = html[0];
    //cookie value
    var cookiePars = {};
    for (var _name in http._cookie) {
      cookiePars['cookie.' + _name] = http._cookie[_name];
    }
    var pars = think.extend({}, http._get, cookiePars, {
      ':module': module,
      ':controller': controller,
      ':action': action
    });
    rule = rule.replace(/\{([\w\:\.]+)\}/g, function (a, name) {
      return pars[name] || '';
    });
    var callback = html[2] || this.cache.callback || this.getCacheFilename;
    var filename = callback(rule, this.http) + this.cache.file_ext;
    //set html cache filename, for write_html_cache middleware
    http.html_filename = filename;
    var cacheTime = html[1] || this.cache.timeout;
    return cacheTime;
  };

  /**
   * 
   * @param  {String} key []
   * @return {String}     [cache file name]
   */

  _default.prototype.getCacheFilename = function getCacheFilename(key) {
    var value = think.md5(key);
    return value[0] + '/' + value[1] + '/' + value;
  };

  /**
   * get view file
   * @return {String} [cache file]
   */

  _default.prototype.getViewFile = function getViewFile() {
    var http = this.http;
    var key = http.module + '/' + http.controller + '/' + http.action;
    return thinkCache(thinkCache.VIEW, key);
  };

  /**
   * check cache is expired
   * @return {Boolean} []
   */

  _default.prototype.isCacheExpired = function isCacheExpired(cacheTime) {
    if (cacheTime === false) {
      return true;
    }
    var cacheFile = this.cache.path + '/' + this.http.html_filename;
    if (!think.isFile(cacheFile)) {
      return true;
    }
    var cacheFileMtime = _fs2['default'].statSync(cacheFile).mtime.getTime();
    var tplFile = this.getViewFile();
    if (tplFile) {
      if (!think.isFile(tplFile)) {
        return true;
      }
      var tplFileMtime = _fs2['default'].statSync(tplFile).mtime.getTime();
      if (tplFileMtime > cacheFileMtime) {
        return true;
      }
    }
    if (Date.now() > cacheFileMtime + cacheTime * 1000) {
      return true;
    }
    return false;
  };

  return _default;
})(think.middleware.base);

exports['default'] = _default;
module.exports = exports['default'];